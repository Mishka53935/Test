




/* –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */
if (!defined('ABSPATH')) exit; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
define('TELEGRAM_BOT_TOKEN', '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE');
define('ADMIN_CHAT_ID', '930819186');

/* –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */
add_action('wp_ajax_get_time_slots', 'get_time_slots');
add_action('wp_ajax_nopriv_get_time_slots', 'get_time_slots');
add_action('wp_ajax_submit_booking', 'submit_booking');
add_action('wp_ajax_nopriv_submit_booking', 'submit_booking');



// =============================================
// –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
// =============================================

function get_time_slots() {
    global $wpdb;
    
    $service_id = intval($_POST['service_id']);
    $date = sanitize_text_field($_POST['date']);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
    $selected_date = strtotime($date);
    $today = strtotime(date('Y-m-d 00:00:00'));
    
    if ($selected_date < $today) {
        wp_send_json_error('–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    $service = $wpdb->get_row($wpdb->prepare(
        "SELECT duration, break, weekday_price, weekend_price 
         FROM {$wpdb->prefix}booking_services 
         WHERE id = %d", 
        $service_id
    ));
    
    if(!$service) {
        wp_send_json_error('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    $day_of_week = date('w', strtotime($date));
    $is_weekend = ($day_of_week == 0 || $day_of_week == 6);
    $price = $is_weekend ? $service->weekend_price : $service->weekday_price;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏ —Å –∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
    $bookings = $wpdb->get_results($wpdb->prepare(
        "SELECT o.start_time, o.end_time, s.break 
         FROM {$wpdb->prefix}booking_orders o
         LEFT JOIN {$wpdb->prefix}booking_services s ON o.service_id = s.id
         WHERE o.booking_date = %s", 
        $date
    ));
    
    $slots = [];
    $start_time = strtotime("10:00");
    $end_time = strtotime("22:00");
    $service_duration = $service->duration * 60;
    $service_break = $service->break * 60;
    
    while($start_time <= $end_time - $service_duration) {
        $slot_end = $start_time + $service_duration;
        $total_occupied = $slot_end + $service_break;
        $available = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        foreach($bookings as $booking) {
            $busy_start = strtotime($booking->start_time);
            $busy_end = strtotime($booking->end_time) + ($booking->break * 60);
            
            $overlap = ($start_time < $busy_end) && ($total_occupied > $busy_start);
            
            if($overlap) {
                $available = false;
                break;
            }
        }
        
        if($available && $slot_end <= $end_time) {
            $slots[] = [
                'start' => date('H:i', $start_time),
                'end' => date('H:i', $slot_end),
                'price' => $price
            ];
        }
        
        $start_time += 1800; // –®–∞–≥ 30 –º–∏–Ω—É—Ç
    }
    
    wp_send_json_success([
        'slots' => $slots,
        'price' => $price,
        'is_weekend' => $is_weekend
    ]);
}

function submit_booking() {
    error_log('Received service_id: ' . print_r($_POST['service_id'], true));
    
    global $wpdb;
    $required = ['service_id', 'date', 'start', 'end', 'name', 'phone', 'email'];
    foreach($required as $field) {
        if(empty($_POST[$field])) {
            wp_send_json_error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ: " . $field);
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
    $service = $wpdb->get_row($wpdb->prepare(
        "SELECT name, duration, break, weekday_price, weekend_price 
         FROM {$wpdb->prefix}booking_services 
         WHERE id = %d", 
        intval($_POST['service_id'])
    ));
    
    if(!$service) {
        wp_send_json_error('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    $data = [
        'service_id' => intval($_POST['service_id']),
        'booking_date' => sanitize_text_field($_POST['date']),
        'start_time' => sanitize_text_field($_POST['start']),
        'end_time' => sanitize_text_field($_POST['end']),
        'client_name' => sanitize_text_field($_POST['name']),
        'client_phone' => preg_replace('/[^0-9]/', '', $_POST['phone']),
        'client_email' => sanitize_email($_POST['email']),
        'price' => floatval($_POST['price']),
        'created_at' => current_time('mysql')
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT o.id 
        FROM {$wpdb->prefix}booking_orders o 
        LEFT JOIN {$wpdb->prefix}booking_services s 
            ON o.service_id = s.id 
        WHERE o.booking_date = %s 
        AND (
            o.start_time < ADDTIME(%s, SEC_TO_TIME(%d)) 
            AND ADDTIME(o.end_time, SEC_TO_TIME(s.break * 60)) > %s
        )", 
        $data['booking_date'], 
        $data['end_time'], 
        $service->break * 60, 
        $data['start_time']
    ));
    
    if($exists) {
        wp_send_json_error('–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ');
    }

    $result = $wpdb->insert("{$wpdb->prefix}booking_orders", $data);
    if($result === false) {
        error_log('–û—à–∏–±–∫–∞ –ë–î: ' . $wpdb->last_error);
        wp_send_json_error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
    $telegram_message = "‚úÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
        . "üìå –£—Å–ª—É–≥–∞: {$service->name}\n"
        . "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {$service->duration} –º–∏–Ω.\n"
        . "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤: {$service->break} –º–∏–Ω.\n"
        . "üë§ –ò–º—è: {$_POST['name']}\n"
        . "üìû –¢–µ–ª–µ—Ñ–æ–Ω: " . preg_replace('/[^0-9]/', '', $_POST['phone']) . "\n"
        . "üìß Email: {$_POST['email']}\n"
        . "üìÖ –î–∞—Ç–∞: {$_POST['date']}\n"
        . "‚è∞ –í—Ä–µ–º—è: {$_POST['start']}-{$_POST['end']}\n"
        . "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$_POST['price']} —Ä—É–±.";

    send_telegram_message(ADMIN_CHAT_ID, $telegram_message);
    
    manage_telegram_calendar('930819186'); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    wp_send_json_success(['booking_id' => $wpdb->insert_id]);
}

// =============================================
// –§–û–†–ú–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (frontend)
// =============================================


add_shortcode('booking_form', function() {
    global $wpdb;
    $services = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}booking_services");
    ob_start(); ?>
    
    <style>
    .booking-form {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .form-group {
        margin-bottom: 1.5rem;
    }
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
    }
    input, select {
        width: 100%;
        padding: 0.8rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }
    #time-slots {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 0.5rem;
        margin: 1.5rem 0;
    }
    .time-slot {
        padding: 0.8rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
    }
    .time-slot.selected {
        background: #2196F3;
        color: white;
        border-color: #2196F3;
    }
    #submit-booking {
        width: 100%;
        padding: 1rem;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1.1rem;
        cursor: pointer;
        margin-top: 1rem;
    }
    .service-info {
        margin: 10px 0;
        padding: 10px;
        background: #f5f5f5;
        border-radius: 4px;
    }
    </style>

    <div class="booking-form">
        <div class="form-group">
            <label for="booking-date">–î–∞—Ç–∞:</label>
            <input type="date" id="booking-date" min="<?= date('Y-m-d') ?>" required>
        </div>
        
        <div class="form-group">
            <label for="booking-service">–£—Å–ª—É–≥–∞:</label>
            <select id="booking-service" required>
                <?php foreach($services as $service): ?>
                <option value="<?= $service->id ?>" 
                    data-duration="<?= $service->duration ?>"
                    data-break="<?= $service->break ?>"
                    data-weekday-price="<?= $service->weekday_price ?>" 
                    data-weekend-price="<?= $service->weekend_price ?>">
                    <?= $service->name ?> 
                    (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <?= $service->duration ?> –º–∏–Ω,
                     –ü–µ—Ä–µ—Ä—ã–≤: <?= $service->break ?> –º–∏–Ω)
                </option>
                <?php endforeach; ?>
            </select>
        </div>

        <div class="form-group">
            <label>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</label>
            <div id="time-slots"></div>
        </div>

        <div class="form-group">
            <input type="text" id="client-name" placeholder="–í–∞—à–µ –∏–º—è" required>
        </div>
        
        <div class="form-group">
            <input type="tel" id="client-phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" required>
        </div>
        
        <div class="form-group">
            <input type="email" id="client-email" required placeholder="Email">
        </div>

        <button id="submit-booking">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const dateInput = document.getElementById('booking-date');
        const serviceSelect = document.getElementById('booking-service');
        const timeSlots = document.getElementById('time-slots');
        
        function updatePriceDisplay() {
            const date = new Date(dateInput.value);
            const isWeekend = [0, 6].includes(date.getDay());
            const price = isWeekend 
                ? serviceSelect.options[serviceSelect.selectedIndex].dataset.weekendPrice 
                : serviceSelect.options[serviceSelect.selectedIndex].dataset.weekdayPrice;
        }

        function loadSlots() {
             const service = {
                duration: parseInt(document.querySelector('#booking-service').dataset.duration),
                break: parseInt(document.querySelector('#booking-service').dataset.break)
            };
            if(!dateInput.value) return;
            
            fetch('/wp-admin/admin-ajax.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: new URLSearchParams({
                    action: 'get_time_slots',
                    service_id: serviceSelect.value,
                    date: dateInput.value
                })
            })
            .then(r => r.json())
            .then(data => {
                if(data.success) {
                    timeSlots.innerHTML = data.data.slots.map(slot => `
                        <div class="time-slot" 
                             data-start="${slot.start}" 
                             data-end="${slot.end}"
                             data-price="${slot.price}">
                            ${slot.start}
                        </div>
                    `).join('');
                }
            });
        }

        dateInput.addEventListener('change', () => {
            updatePriceDisplay();
            loadSlots();
        });

        serviceSelect.addEventListener('change', () => {
            if(dateInput.value) {
                updatePriceDisplay();
                loadSlots();
            }
        });

        timeSlots.addEventListener('click', (e) => {
            if(e.target.classList.contains('time-slot')) {
                document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
                e.target.classList.add('selected');
            }
        });

        document.getElementById('submit-booking').addEventListener('click', () => {
            const selected = document.querySelector('.time-slot.selected');
            if(!selected) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è!');
            
            const formData = {
                action: 'submit_booking',
                service_id: serviceSelect.value,
                date: dateInput.value,
                start: selected.dataset.start,
                end: selected.dataset.end,
                name: document.getElementById('client-name').value.trim(),
                phone: document.getElementById('client-phone').value.replace(/\D/g, ''),
                email: document.getElementById('client-email').value.trim(),
                price: selected.dataset.price
            };

            fetch('/wp-admin/admin-ajax.php', {
                method: 'POST',
                body: new URLSearchParams(formData)
            })
            .then(r => r.json())
            .then(data => {
                if(data.success) {
                    alert('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! ID: ' + data.data.booking_id);
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + data.data);
                }
            });
        });

        // –ú–∞—Å–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        document.getElementById('client-phone').addEventListener('input', function(e) {
            let x = e.target.value.replace(/\D/g, '').match(/(\d{0,1})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/);
            e.target.value = !x[2] ? x[1] : '+7 (' + x[2] + ') ' + x[3] + (x[4] ? '-' + x[4] : '') + (x[5] ? '-' + x[5] : '');
        });
    });
    </script>
    
    <?php
    return ob_get_clean();
});




// =============================================
// –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø
// =============================================

add_action('admin_menu', function() {
    add_menu_page(
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏',
        '–ó–∞–ø–∏—Å–∏',
        'manage_options',
        'manage_bookings',
        'manage_bookings_page'
    );
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
function manage_bookings_page() {
    global $wpdb;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–æ—Ä—Ç–∏—Ä—É—è –∏—Ö –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    $bookings = $wpdb->get_results("
        SELECT * FROM {$wpdb->prefix}booking_orders
        ORDER BY booking_date DESC, start_time DESC
    ");

    // –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    echo '<div class="wrap">';
    echo '<h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏</h1>';
    
    // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    echo '<h2>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å</h2>';
    echo '<form id="add-booking-form">
            <input type="date" name="booking_date" required placeholder="–î–∞—Ç–∞">
            <input type="time" name="start_time" required placeholder="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞">
            <input type="time" name="end_time" required placeholder="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è">
            <input type="text" name="client_name" required placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞">
            <input type="tel" name="client_phone" required placeholder="–¢–µ–ª–µ—Ñ–æ–Ω">
            <input type="email" name="client_email" required placeholder="Email">
            <button type="submit">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</button>
          </form>';

    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–ø–∏—Å—è–º–∏
    echo '<table class="wp-list-table widefat fixed striped">';
    echo '<thead>
            <tr>
                <th>ID</th>
                <th>–î–∞—Ç–∞</th>
                <th>–í—Ä–µ–º—è</th>
                <th>–£—Å–ª—É–≥–∞</th>
                <th>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>Email</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>';
    echo '<tbody>';
    foreach ($bookings as $booking) {
        echo '<tr>
                <td>' . esc_html($booking->id) . '</td>
                <td>' . esc_html($booking->booking_date) . '</td>
                <td>' . esc_html($booking->start_time) . ' - ' . esc_html($booking->end_time) . '</td>
                <td>' . esc_html($booking->service_id) . '</td>
                <td>' . esc_html($booking->client_name) . '</td>
                <td>' . esc_html($booking->client_phone) . '</td>
                <td>' . esc_html($booking->client_email) . '</td>
                <td>
                    <a href="#" class="edit-booking" data-id="' . esc_attr($booking->id) . '">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
                    <a href="#" class="delete-booking" data-id="' . esc_attr($booking->id) . '">–£–¥–∞–ª–∏—Ç—å</a>
                </td>
              </tr>';
    }
    echo '</tbody>';
    echo '</table>';

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    echo '<div id="edit-booking-modal" style="display:none;">
            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h2>
            <form id="edit-booking-form">
                <input type="hidden" name="booking_id" id="edit-booking-id">
                <input type="date" name="booking_date" id="edit-booking-date" required placeholder="–î–∞—Ç–∞">
                <input type="time" name="start_time" id="edit-start-time" required placeholder="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞">
                <input type="time" name="end_time" id="edit-end-time" required placeholder="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è">
                <input type="text" name="client_name" id="edit-client-name" required placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞">
                <input type="tel" name="client_phone" id="edit-client-phone" required placeholder="–¢–µ–ª–µ—Ñ–æ–Ω">
                <input type="email" name="client_email" id="edit-client-email" required placeholder="Email">
                <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            </form>
        </div>';

    echo '</div>';

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º
    ?>
    <script>
    document.getElementById('add-booking-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        formData.append('action', 'add_booking');

        fetch(ajaxurl, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
                location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            } else {
                alert('–û—à–∏–±–∫–∞: ' + data.data);
            }
        });
    });

    document.querySelectorAll('.delete-booking').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            const bookingId = this.dataset.id;
            
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
                fetch(ajaxurl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        action: 'delete_booking',
                        booking_id: bookingId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!');
                        location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.data);
                    }
                });
            }
        });
    });

    document.querySelectorAll('.edit-booking').forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            const bookingId = this.dataset.id;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fetch(ajaxurl + '?action=get_booking&booking_id=' + bookingId)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const booking = data.data;
                        document.getElementById('edit-booking-id').value = booking.id;
                        document.getElementById('edit-booking-date').value = booking.booking_date;
                        document.getElementById('edit-start-time').value = booking.start_time;
                        document.getElementById('edit-end-time').value = booking.end_time;
                        document.getElementById('edit-client-name').value = booking.client_name;
                        document.getElementById('edit-client-phone').value = booking.client_phone;
                        document.getElementById('edit-client-email').value = booking.client_email;

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                        document.getElementById('edit-booking-modal').style.display = 'block';
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.data);
                    }
                });
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    document.getElementById('edit-booking-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        formData.append('action', 'edit_booking');

        fetch(ajaxurl, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
                location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            } else {
                alert('–û—à–∏–±–∫–∞: ' + data.data);
            }
        });
    });
    </script>
    <?php
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
add_action('wp_ajax_add_booking', 'add_booking');
add_action('wp_ajax_delete_booking', 'delete_booking');
add_action('wp_ajax_get_booking', 'get_booking');
add_action('wp_ajax_edit_booking', 'edit_booking');

function add_booking() {
    global $wpdb;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    $data = [
        'booking_date' => sanitize_text_field($_POST['booking_date']),
        'start_time' => sanitize_text_field($_POST['start_time']),
        'end_time' => sanitize_text_field($_POST['end_time']),
        'client_name' => sanitize_text_field($_POST['client_name']),
        'client_phone' => sanitize_text_field($_POST['client_phone']),
        'client_email' => sanitize_email($_POST['client_email']),
    ];
    
    // –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    $result = $wpdb->insert("{$wpdb->prefix}booking_orders", $data);
    
    if ($result) {
        wp_send_json_success();
    } else {
        wp_send_json_error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    }
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
add_action('wp_ajax_delete_booking', 'delete_booking');

function delete_booking() {
    global $wpdb;
    
    $booking_id = intval($_POST['booking_id']);
    
    $result = $wpdb->delete("{$wpdb->prefix}booking_orders", ['id' => $booking_id]);
    
    if ($result) {
        wp_send_json_success();
    } else {
        wp_send_json_error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    }
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
add_action('wp_ajax_get_booking', 'get_booking');

function get_booking() {
    global $wpdb;
    
    $booking_id = intval($_GET['booking_id']);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    $booking = $wpdb->get_row($wpdb->prepare("SELECT * FROM {$wpdb->prefix}booking_orders WHERE id = %d", $booking_id));
    
    if ($booking) {
        wp_send_json_success($booking);
    } else {
        wp_send_json_error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
add_action('wp_ajax_edit_booking', 'edit_booking');

function edit_booking() {
    global $wpdb;

    $booking_id = intval($_POST['booking_id']);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    $data = [
        'booking_date' => sanitize_text_field($_POST['booking_date']),
        'start_time' => sanitize_text_field($_POST['start_time']),
        'end_time' => sanitize_text_field($_POST['end_time']),
        'client_name' => sanitize_text_field($_POST['client_name']),
        'client_phone' => sanitize_text_field($_POST['client_phone']),
        'client_email' => sanitize_email($_POST['client_email']),
    ];
    
    $result = $wpdb->update("{$wpdb->prefix}booking_orders", $data, ['id' => $booking_id]);
    
    if ($result) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        send_telegram_message('930819186', "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n–ò–º—è: {$data['client_name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {$data['client_phone']}\nEmail: {$data['client_email']}\n–î–∞—Ç–∞: {$data['booking_date']}\n–í—Ä–µ–º—è: {$data['start_time']} - {$data['end_time']}");
        
        wp_send_json_success();
    } else {
        wp_send_json_error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    }
}



///////////////////////////////////////////////////////////////



function send_all_bookings_to_telegram() {
    global $wpdb;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–æ—Ä—Ç–∏—Ä—É—è –∏—Ö –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    $bookings = $wpdb->get_results("
        SELECT * FROM {$wpdb->prefix}booking_orders
        ORDER BY booking_date ASC, start_time ASC
    ");

    if (empty($bookings)) {
        send_telegram_message("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.");
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $message = "–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n";
    foreach ($bookings as $booking) {
        $message .= "ID: {$booking->id}\n";
        $message .= "–ò–º—è: {$booking->client_name}\n";
        $message .= "–¢–µ–ª–µ—Ñ–æ–Ω: {$booking->client_phone}\n";
        $message .= "Email: {$booking->client_email}\n";
        $message .= "–î–∞—Ç–∞: {$booking->booking_date}\n";
        $message .= "–í—Ä–µ–º—è: {$booking->start_time} - {$booking->end_time}\n";
        $message .= "---------------------------\n";
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    send_telegram_message($message);
}

function send_dates_menu_to_telegram() {
    global $wpdb;
    
    $dates = $wpdb->get_col("SELECT DISTINCT booking_date 
                            FROM {$wpdb->prefix}booking_orders 
                            ORDER BY booking_date DESC 
                            LIMIT 10");

    if(empty($dates)) {
        send_telegram_message('930819186', "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.");
        return;
    }

    $keyboard = [];
    foreach($dates as $date) {
        $keyboard[] = [
            ['text' => "üìÖ $date", 'callback_data' => "view_records_$date"]
        ];
    }

    send_telegram_message_with_keyboard('930819186', "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", $keyboard);
}



function send_telegram_message_with_keyboard($chat_id, $message, $keyboard) {
    $bot_token = '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE';
    $url = "https://api.telegram.org/bot$bot_token/sendMessage";
    
    return wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'text' => $message,
            'reply_markup' => json_encode([
                'inline_keyboard' => $keyboard,
                'resize_keyboard' => true
            ])
        ]
    ]);
}

add_action('wp_ajax_handle_telegram_callback', 'handle_telegram_callback');
function handle_telegram_callback() {
    global $wpdb;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    $callback_data = $_POST['callback_data'];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
    if (strpos($callback_data, 'view_records_') === 0) {
        $date = str_replace('view_records_', '', $callback_data);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        $bookings = $wpdb->get_results($wpdb->prepare("SELECT * FROM {$wpdb->prefix}booking_orders WHERE booking_date = %s ORDER BY start_time ASC", $date));

        if (empty($bookings)) {
            send_telegram_message("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.");
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—è–º–∏
        $message = "–ó–∞–ø–∏—Å–∏ –Ω–∞ $date:\n";
        foreach ($bookings as $booking) {
            $message .= "ID: {$booking->id}\n";
            $message .= "–ò–º—è: {$booking->client_name}\n";
            $message .= "–¢–µ–ª–µ—Ñ–æ–Ω: {$booking->client_phone}\n";
            $message .= "Email: {$booking->client_email}\n";
            $message .= "–í—Ä–µ–º—è: {$booking->start_time} - {$booking->end_time}\n";
            $message .= "---------------------------\n";
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ Telegram
        send_telegram_message($message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ Telegram
add_action('rest_api_init', function() {
    register_rest_route('telegram/v1', '/webhook', [
        'methods' => 'POST',
        'callback' => 'handle_telegram_update',
        'permission_callback' => '__return_true'
    ]);
});

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞


function handle_telegram_update(WP_REST_Request $request) {
    global $wpdb;
    
    $update = json_decode($request->get_body(), true);
    error_log('Telegram Update: ' . print_r($update, true)); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–æ–∫)
    if (isset($update['callback_query'])) {
        $callback = $update['callback_query'];
        $chat_id = $callback['message']['chat']['id'];
        $message_id = $callback['message']['message_id'];
        $data = $callback['data'];
        $callback_id = $callback['id'];

        // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        send_telegram_answer_callback($callback_id);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback_data
        switch (true) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
            case strpos($data, 'prev_day_') === 0:
                $date = str_replace('prev_day_', '', $data);
                send_bookings_for_date($chat_id, date('Y-m-d', strtotime($date . ' -1 day')));
                break;
                
            case strpos($data, 'next_day_') === 0:
                $date = str_replace('next_day_', '', $data);
                send_bookings_for_date($chat_id, date('Y-m-d', strtotime($date . ' +1 day')));
                break;
                
            // –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            case strpos($data, 'date_') === 0:
                $date = str_replace('date_', '', $data);
                send_bookings_for_date($chat_id, $date);
                break;
                
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
            case strpos($data, 'month_') === 0:
                $month = str_replace('month_', '', $data);
                manage_telegram_calendar($chat_id, $month);
                break;
                
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            case $data === 'show_calendar':
            case $data === '–ö–∞–ª–µ–Ω–¥–∞—Ä—å':
                manage_telegram_calendar($chat_id);
                break;
                
            case $data === 'refresh':
                manage_telegram_calendar($chat_id);
                break;
                
            case $data === 'select_date':
                manage_telegram_calendar($chat_id);
                break;
                
            // –û—Ç–º–µ–Ω–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            case strpos($data, 'confirm_cancel_') === 0:
                $booking_id = str_replace('confirm_cancel_', '', $data);
                cancel_booking($chat_id, $booking_id);
                break;
                
            case $data === 'dont_cancel':
                send_telegram_message($chat_id, "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞");
                break;
                
            default:
                error_log('Unknown callback data: ' . $data);
                send_telegram_message($chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (isset($update['message'])) {
        $message = $update['message'];
        $chat_id = $message['chat']['id'];
        $text = isset($message['text']) ? trim($message['text']) : '';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        switch ($text) {
            case '/add_service':
                start_service_creation($chat_id);
                break;
            case '/list_services':
                send_services_list($chat_id);
                break;
            case '/start':
            case '/help':
                $reply = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                       . "/calendar - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å\n"
                       . "/bookings - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
                       . "/help - –ü–æ–º–æ—â—å";
                send_telegram_message($chat_id, $reply);
                break;
                
            case '/calendar':
            case '–ö–∞–ª–µ–Ω–¥–∞—Ä—å':
                manage_telegram_calendar($chat_id);
                break;
                
            case '/bookings':
                send_user_bookings($chat_id);
                break;
                
            case '/today':
                send_bookings_for_date($chat_id, date('Y-m-d'));
                break;
                
            case '/tomorrow':
                send_bookings_for_date($chat_id, date('Y-m-d', strtotime('+1 day')));
                break;
            case '/add':
                start_booking_creation($chat_id);
                break;
                
            case '/delete':
                handle_delete_command($chat_id);
                break;
                
            case '/edit':
                handle_edit_command($chat_id);
                break;
                
            default:
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∏–º—è
                if (preg_match('/^(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$/', $text)) {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    process_phone_number($chat_id, $text);
                } else {
                    send_telegram_message($chat_id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
         if (isset($_SESSION['creating_service'])) {
        handle_service_creation($chat_id, $text);
        }
        
         if (isset($update['callback_query'])) {
        $data = $callback['data'];
        
            if (strpos($data, 'edit_') === 0) {
                $booking_id = str_replace('edit_', '', $data);
                start_booking_edit($chat_id, $booking_id);
            }
            elseif (strpos($data, 'delete_') === 0) {
                $booking_id = str_replace('delete_', '', $data);
                handle_delete_booking($chat_id, $booking_id);
            }
        }
    
    }
    
    return new WP_REST_Response(['status' => 'ok'], 200);
}

function send_user_bookings($chat_id) {
    global $wpdb;
    
    $bookings = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}booking_orders 
         WHERE client_phone = %s 
         ORDER BY booking_date DESC",
        get_user_meta($chat_id, 'phone', true)
    ));
    
    if(empty($bookings)) {
        send_telegram_message($chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π");
        return;
    }
    
    $message = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n";
    foreach($bookings as $booking) {
        $message .= "üìÖ " . date('d.m.Y', strtotime($booking->booking_date)) . "\n";
        $message .= "‚è∞ " . $booking->start_time . "-" . $booking->end_time . "\n";
        $message .= "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
    }
    
    send_telegram_message($chat_id, $message);
}

function start_service_creation($chat_id) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    update_user_meta($chat_id, 'service_creation_step', 'name');
    send_telegram_message($chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:");
}

function handle_service_creation($chat_id, $text) {
    global $wpdb;
    
    $current_step = get_user_meta($chat_id, 'service_creation_step', true);
    
    switch($current_step) {
        case 'name':
            update_user_meta($chat_id, 'new_service_name', $text);
            update_user_meta($chat_id, 'service_creation_step', 'duration');
            send_telegram_message($chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):");
            break;
            
        case 'duration':
            update_user_meta($chat_id, 'new_service_duration', $text);
            update_user_meta($chat_id, 'service_creation_step', 'break');
            send_telegram_message($chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ –º–µ–∂–¥—É —Å–µ–∞–Ω—Å–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):");
            break;
            
        case 'break':
            update_user_meta($chat_id, 'new_service_break', $text);
            update_user_meta($chat_id, 'service_creation_step', 'weekday_price');
            send_telegram_message($chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±—É–¥–Ω–∏:");
            break;
            
        case 'weekday_price':
            update_user_meta($chat_id, 'new_service_weekday_price', $text);
            update_user_meta($chat_id, 'service_creation_step', 'weekend_price');
            send_telegram_message($chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ:");
            break;
            
        case 'weekend_price':
            $service_data = [
                'name' => get_user_meta($chat_id, 'new_service_name', true),
                'duration' => get_user_meta($chat_id, 'new_service_duration', true),
                'break' => get_user_meta($chat_id, 'new_service_break', true),
                'weekday_price' => get_user_meta($chat_id, 'new_service_weekday_price', true),
                'weekend_price' => $text
            ];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥—É –≤ –ë–î
            $wpdb->insert("{$wpdb->prefix}booking_services", $service_data);
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            delete_user_meta($chat_id, 'service_creation_step');
            delete_user_meta($chat_id, 'new_service_name');
            delete_user_meta($chat_id, 'new_service_duration');
            delete_user_meta($chat_id, 'new_service_break');
            delete_user_meta($chat_id, 'new_service_weekday_price');
            
            send_telegram_message($chat_id, "‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
            break;
    }
}

function send_services_list($chat_id) {
    global $wpdb;
    
    $services = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}booking_services");
    
    if(empty($services)) {
        send_telegram_message($chat_id, "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.");
        return;
    }
    
    $message = "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥:\n\n";
    foreach($services as $service) {
        $message .= "üîπ {$service->name}\n";
        $message .= "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {$service->duration} –º–∏–Ω\n";
        $message .= "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤: {$service->break} –º–∏–Ω\n";
        $message .= "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->weekday_price} —Ä—É–±. (–±—É–¥–Ω–∏)\n";
        $message .= "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service->weekend_price} —Ä—É–±. (–≤—ã—Ö–æ–¥–Ω—ã–µ)\n\n";
    }
    
    send_telegram_message($chat_id, $message);
}

// –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
function start_booking_creation($chat_id) {
    update_user_meta($chat_id, 'booking_step', 'select_service');
    send_services_list_with_keyboard($chat_id);
}

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
function send_services_list_with_keyboard($chat_id) {
    global $wpdb;
    
    $services = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}booking_services");
    $keyboard = [];
    
    foreach ($services as $service) {
        $keyboard[] = [[
            'text' => $service->name,
            'callback_data' => 'select_service_'.$service->id
        ]];
    }
    
    send_telegram_message($chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", $keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
function handle_service_selection($chat_id, $service_id) {
    update_user_meta($chat_id, 'booking_service', $service_id);
    update_user_meta($chat_id, 'booking_step', 'select_date');
    manage_telegram_calendar($chat_id);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
function handle_date_selection($chat_id, $date) {
    update_user_meta($chat_id, 'booking_date', $date);
    update_user_meta($chat_id, 'booking_step', 'select_time');
    send_time_slots_for_date($chat_id, $date);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
function send_time_slots_for_date($chat_id, $date) {
    global $wpdb;
    
    $service_id = get_user_meta($chat_id, 'booking_service', true);
    $slots = get_available_time_slots($service_id, $date);
    
    $keyboard = [];
    foreach ($slots as $slot) {
        $keyboard[] = [[
            'text' => $slot['start'].' - '.$slot['end'],
            'callback_data' => 'select_time_'.$slot['start'].'_'.$slot['end']
        ]];
    }
    
    send_telegram_message($chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", $keyboard);
}

// –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function start_booking_edit($chat_id, $booking_id) {
    global $wpdb;
    
    $booking = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}booking_orders WHERE id = %d",
        $booking_id
    ));
    
    $keyboard = [
        [
            ['text' => '‚úèÔ∏è –î–∞—Ç–∞', 'callback_data' => 'edit_date_'.$booking_id],
            ['text' => '‚è∞ –í—Ä–µ–º—è', 'callback_data' => 'edit_time_'.$booking_id]
        ],
        [
            ['text' => 'üë§ –ò–º—è', 'callback_data' => 'edit_name_'.$booking_id],
            ['text' => 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'callback_data' => 'edit_phone_'.$booking_id]
        ],
        [
            ['text' => 'üìß Email', 'callback_data' => 'edit_email_'.$booking_id],
            ['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel_edit']
        ]
    ];
    
    $message = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ #$booking_id:\n"
        . "–î–∞—Ç–∞: {$booking->booking_date}\n"
        . "–í—Ä–µ–º—è: {$booking->start_time}-{$booking->end_time}\n"
        . "–ò–º—è: {$booking->client_name}\n"
        . "–¢–µ–ª–µ—Ñ–æ–Ω: {$booking->client_phone}\n"
        . "Email: {$booking->client_email}";
    
    send_telegram_message($chat_id, $message, $keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
function handle_edit_date($chat_id, $booking_id) {
    update_user_meta($chat_id, 'editing_booking', $booking_id);
    update_user_meta($chat_id, 'edit_step', 'date');
    manage_telegram_calendar($chat_id);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
function update_booking_from_telegram($booking_id, $field, $value) {
    global $wpdb;
    
    $data = [$field => sanitize_text_field($value)];
    $where = ['id' => $booking_id];
    
    $wpdb->update("{$wpdb->prefix}booking_orders", $data, $where);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    manage_telegram_calendar(ADMIN_CHAT_ID);
    send_telegram_message($chat_id, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
function handle_delete_booking($chat_id, $booking_id) {
    $keyboard = [
        [
            ['text' => '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data' => 'confirm_delete_'.$booking_id],
            ['text' => '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data' => 'cancel_delete']
        ]
    ];
    
    send_telegram_message($chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #$booking_id?", $keyboard);
}

// –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
function confirm_delete_booking($booking_id) {
    global $wpdb;
    
    $wpdb->delete("{$wpdb->prefix}booking_orders", ['id' => $booking_id]);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    manage_telegram_calendar(ADMIN_CHAT_ID);
    send_telegram_message($chat_id, "‚úÖ –ó–∞–ø–∏—Å—å #$booking_id —É–¥–∞–ª–µ–Ω–∞!");
}

function handle_cancel_booking($chat_id, $booking_id) {
    // –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    $url = "https://api.telegram.org/bot".TELEGRAM_BOT_TOKEN."/sendMessage";
    wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'text' => "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ #$booking_id",
            'reply_markup' => json_encode([
                'inline_keyboard' => [
                    [
                        ['text' => '‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', 'callback_data' => 'confirm_cancel_'.$booking_id],
                        ['text' => '‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', 'callback_data' => 'dont_cancel']
                    ]
                ]
            ])
        ]
    ]);
}

function format_phone($phone) {
    $cleaned = preg_replace('/[^0-9]/', '', $phone);
    return $cleaned ? preg_replace('/(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/', '+$1 ($2) $3-$4-$5', $cleaned) : '–Ω–µ —É–∫–∞–∑–∞–Ω';
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function send_telegram_message($chat_id, $text, $buttons = null) {
    $url = "https://api.telegram.org/bot".TELEGRAM_BOT_TOKEN."/sendMessage";
    
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    if($buttons) {
        $data['reply_markup'] = json_encode(['inline_keyboard' => $buttons]);
    }
    
    $response = wp_remote_post($url, ['body' => $data]);
    return json_decode(wp_remote_retrieve_body($response), true);
}


// –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –û–î–ò–ù register_activation_hook
register_activation_hook(__FILE__, function() {
    global $wpdb;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    $tables = [
        "{$wpdb->prefix}telegram_calendar" => "
            CREATE TABLE {$wpdb->prefix}telegram_calendar (
                id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                chat_id VARCHAR(100) NOT NULL UNIQUE,
                message_id VARCHAR(100) NOT NULL,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        "
    ];
    
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    foreach($tables as $sql) {
        dbDelta($sql);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    $webhook_url = get_site_url().'/wp-json/telegram/v1/webhook';
    wp_remote_post("https://api.telegram.org/bot7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE/setWebhook", [
        'body' => ['url' => $webhook_url]
    ]);
});

// 3. –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback
function send_telegram_answer_callback($callback_id) {
    $url = "https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/answerCallbackQuery";
    wp_remote_post($url, [
        'body' => [
            'callback_query_id' => $callback_id,
            'show_alert' => false
        ]
    ]);
}

// 4. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞—Ç—ã
function send_bookings_for_date($chat_id, $date) {
    global $wpdb;
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    $bookings = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}booking_orders 
         WHERE booking_date = %s 
         ORDER BY start_time ASC",
        $date
    ));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    $message = "üìÖ <b>" . date('d.m.Y', strtotime($date)) . "</b>\n";
    $message .= "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    
    if(empty($bookings)) {
        $message .= "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç";
    } else {
        $message .= "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: " . count($bookings) . "\n";
        $message .= "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
        
        foreach($bookings as $booking) {
            $message .= "üÜî <b>ID:</b> {$booking->id}\n";
            $message .= "üë§ {$booking->client_name}\n";
            $message .= "‚è∞ " . date('H:i', strtotime($booking->start_time)) . "-" . date('H:i', strtotime($booking->end_time)) . "\n";
            $message .= "üìû " . format_phone($booking->client_phone) . "\n";
            $message .= "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
        }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    $keyboard = [
        'inline_keyboard' => [
            [
                [
                    'text' => '‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å',
                    'callback_data' => 'prev_day_' . $date
                ],
                [
                    'text' => '–°–ª–µ–¥. –¥–µ–Ω—å ‚û°Ô∏è',
                    'callback_data' => 'next_day_' . $date
                ]
            ],
            [
                [
                    'text' => 'üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É',
                    'callback_data' => 'select_date'
                ]
            ]
        ]
    ];

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    $params = [
        'chat_id' => $chat_id,
        'text' => $message,
        'parse_mode' => 'HTML',
        'reply_markup' => json_encode($keyboard)
    ];

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if(isset($update['callback_query']['message']['message_id'])) {
        $params['message_id'] = $update['callback_query']['message']['message_id'];
        $response = wp_remote_post("https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/editMessageText", [
            'body' => $params
        ]);
    } else {
        // –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        $response = wp_remote_post("https://api.telegram.org/bot" . TELEGRAM_BOT_TOKEN . "/sendMessage", [
            'body' => $params
        ]);
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    error_log('Telegram API Response: ' . print_r($response, true));
    error_log('Keyboard: ' . print_r($keyboard, true));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function generate_calendar_keyboard($selected_month = null) {
    global $wpdb;
    
    $current_month = $selected_month ?: date('Y-m');
    $month_start = date('Y-m-01', strtotime($current_month));
    $month_end = date('Y-m-t', strtotime($current_month));
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã –∏–∑ –ë–î
    $booked_dates = $wpdb->get_col($wpdb->prepare(
        "SELECT DISTINCT booking_date 
        FROM {$wpdb->prefix}booking_orders 
        WHERE booking_date BETWEEN %s AND %s",
        $month_start,
        $month_end
    ));
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    $keyboard = [];
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    $prev_month = date('Y-m', strtotime('-1 month', strtotime($current_month)));
    $next_month = date('Y-m', strtotime('+1 month', strtotime($current_month)));
    
    $keyboard[] = [
        ['text' => '‚¨ÖÔ∏è', 'callback_data' => "month_$prev_month"],
        ['text' => date('F Y', strtotime($current_month)), 'callback_data' => 'current'],
        ['text' => '‚û°Ô∏è', 'callback_data' => "month_$next_month"]
    ];
    
    // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    $keyboard[] = [
        ['text' => '–ü–Ω', 'callback_data' => ' '],
        ['text' => '–í—Ç', 'callback_data' => ' '],
        ['text' => '–°—Ä', 'callback_data' => ' '],
        ['text' => '–ß—Ç', 'callback_data' => ' '],
        ['text' => '–ü—Ç', 'callback_data' => ' '],
        ['text' => '–°–±', 'callback_data' => ' '],
        ['text' => '–í—Å', 'callback_data' => ' ']
    ];
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    $day = 1;
    $first_day_of_week = date('N', strtotime($current_month . '-01'));
    $days_in_month = date('t', strtotime($current_month));

    for ($i = 0; $i < 6; $i++) {
        $week = [];
        for ($j = 1; $j <= 7; $j++) {
            if (($i === 0 && $j < $first_day_of_week) || $day > $days_in_month) {
                $week[] = ['text' => ' ', 'callback_data' => ' '];
            } else {
                $current_date = date('Y-m-') . str_pad($day, 2, '0', STR_PAD_LEFT);
                $has_booking = in_array($current_date, $booked_dates);
                
                $button = [
                    'text' => $has_booking ? "‚úÖ $day" : $day,
                    'callback_data' => $has_booking ? "date_$current_date" : ' '
                ];
                
                $week[] = $button;
                $day++;
            }
        }
        $keyboard[] = $week;
    }
    
     // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    $keyboard[] = [
        ['text' => '‚ûï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å', 'callback_data' => 'create_new'],
        ['text' => 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π', 'callback_data' => 'list_bookings']
    ];
    
    return $keyboard;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
function send_bookings_list($chat_id) {
    global $wpdb;
    
    $bookings = $wpdb->get_results("
        SELECT * FROM {$wpdb->prefix}booking_orders 
        ORDER BY booking_date DESC 
        LIMIT 10
    ");
    
    $keyboard = [];
    foreach ($bookings as $booking) {
        $keyboard[] = [[
            'text' => "#$booking->id {$booking->client_name} - {$booking->booking_date}",
            'callback_data' => 'show_booking_'.$booking->id
        ]];
    }
    
    send_telegram_message($chat_id, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π:", $keyboard);
}




function edit_telegram_message($chat_id, $message_id, $text, $keyboard) {
    $bot_token = '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE';
    $url = "https://api.telegram.org/bot$bot_token/editMessageText";
    
    return wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'message_id' => $message_id,
            'text' => $text,
            'reply_markup' => json_encode([
                'inline_keyboard' => $keyboard,
                'resize_keyboard' => true
            ])
        ]
    ]);
}



function send_updated_calendar() {
    $chat_id = '930819186';
    $message_id = 'ID_–°–û–û–ë–©–ï–ù–ò–Ø_–°_–ö–ê–õ–ï–ù–î–ê–†–ï–ú'; // –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    
    $keyboard = generate_calendar_keyboard();
    edit_telegram_message($chat_id, $message_id, "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", $keyboard);
}

function setup_telegram_menu() {
    $chat_id = '–í–ê–®_CHAT_ID';
    $bot_token = '–í–ê–®_–¢–û–ö–ï–ù';
    $url = "https://api.telegram.org/bot$bot_token/setChatMenuButton";
    
    wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'menu_button' => json_encode([
                'type' => 'commands'
            ])
        ]
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    $keyboard = generate_calendar_keyboard();
    send_telegram_message_with_keyboard($chat_id, "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", $keyboard);
}

// =============================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM (–ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ)
// =============================================




/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –≤ Telegram
 * 
 * @param string $chat_id ID —á–∞—Ç–∞ –≤ Telegram
 * @param string|null $month –ú–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Y-m' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
function manage_telegram_calendar($chat_id, $month = null) {
    global $wpdb;
    $bot_token = '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

    // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    $keyboard = generate_calendar_keyboard($month);
    $message_text = "üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:";

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
    $table_name = $wpdb->prefix . 'telegram_calendar';
    $saved_message_id = $wpdb->get_var($wpdb->prepare(
        "SELECT message_id FROM $table_name WHERE chat_id = %s",
        $chat_id
    ));

    // 3. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if ($saved_message_id) {
        $response = edit_telegram_message($chat_id, $saved_message_id, $message_text, $keyboard);
        
        if (wp_remote_retrieve_response_code($response) != 200) {
            $saved_message_id = false;
        }
    }

    // 4. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
    if (!$saved_message_id) {
        $response = send_telegram_message_with_keyboard($chat_id, $message_text, $keyboard);
        
        if (!is_wp_error($response)) {
            $body = json_decode(wp_remote_retrieve_body($response), true);
            if (isset($body['result']['message_id'])) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                $wpdb->replace($table_name, [
                    'chat_id' => $chat_id,
                    'message_id' => $body['result']['message_id']
                ]);
            }
        }
    }
}

function setup_telegram_bot_menu() {
    $bot_token = '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE';
    $url = "https://api.telegram.org/bot$bot_token/setChatMenuButton";
    
    $response = wp_remote_post($url, [
        'body' => [
            'menu_button' => json_encode([
                'type' => 'commands'
            ])
        ]
    ]);
    
    $commands = [
        ['command' => 'start', 'description' => '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'],
        ['command' => 'calendar', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'],
        ['command' => 'add_service', 'description' => '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É'],
        ['command' => 'list_services', 'description' => '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥'],
        ['command' => 'help', 'description' => '–ü–æ–º–æ—â—å']
    ];
    
    $url = "https://api.telegram.org/bot$bot_token/setMyCommands";
    wp_remote_post($url, [
        'body' => ['commands' => json_encode($commands)]
    ]);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    $commands_url = "https://api.telegram.org/bot$bot_token/setMyCommands";
    wp_remote_post($commands_url, [
        'body' => [
            'commands' => json_encode([
                ['command' => 'calendar', 'description' => '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π'],
                ['command' => 'help', 'description' => '–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É']
            ])
        ]
    ]);
}

add_action('save_post', 'sync_service_to_telegram', 10, 3);
function sync_service_to_telegram($post_id, $post, $update) {
    if($post->post_type != 'service') return; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏
    
    $service_data = get_post_meta($post_id);
    
    $message = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏:\n";
    $message .= "üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {$post->post_title}\n";
    $message .= "‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {$service_data['duration']} –º–∏–Ω\n";
    $message .= "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤: {$service_data['break']} –º–∏–Ω\n";
    $message .= "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service_data['weekday_price']} —Ä—É–±. (–±—É–¥–Ω–∏)\n";
    $message .= "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {$service_data['weekend_price']} —Ä—É–±. (–≤—ã—Ö–æ–¥–Ω—ã–µ)";
    
    send_telegram_message(ADMIN_CHAT_ID, $message);
}


function send_telegram_reply_keyboard($chat_id, $message) {
    $bot_token = '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE';
    $url = "https://api.telegram.org/bot$bot_token/sendMessage";
    
    $keyboard = [
        'keyboard' => [
            [['text' => '–ö–∞–ª–µ–Ω–¥–∞—Ä—å']],
            [['text' => '–ü–æ–º–æ—â—å']]
        ],
        'resize_keyboard' => true,
        'one_time_keyboard' => false
    ];
    
    return wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'text' => $message,
            'reply_markup' => json_encode($keyboard)
        ]
    ]);
}




add_action('wp_ajax_handle_telegram_booking', 'handle_telegram_booking');
add_action('wp_ajax_nopriv_handle_telegram_booking', 'handle_telegram_booking');

function handle_telegram_booking() {
    $data = $_POST;
    $action = $data['action_type'];
    
    switch ($action) {
        case 'create':
            submit_booking_from_telegram($data);
            break;
            
        case 'update':
            update_booking_from_telegram($data);
            break;
            
        case 'delete':
            delete_booking_from_telegram($data);
            break;
    }
    
    wp_send_json_success();
}
