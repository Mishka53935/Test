<?php
/* 
Template Name: Admin Bookings Page 
Template Post Type: page
*/

// Получаем ID текущей страницы
$admin_page_id = get_the_ID();

wp_nonce_field('booking_actions', 'booking_nonce', false);

// Убрана проверка авторизации через WP Users
function custom_password_form() {
    global $post;
    return '
    <div style="max-width:400px; margin:100px auto; padding:20px; text-align:center;">
        <h3>Доступ только для администраторов</h3>
        <form action="' . esc_url(site_url('wp-login.php?action=postpass', 'login_post')) . '" method="post">
            <input type="password" name="post_password" placeholder="Пароль" style="padding:8px; margin:10px; width:200px;">
            <button type="submit" style="padding:8px 20px; background:#007cba; color:white; border:none; border-radius:4px;">Войти</button>
        </form>
    </div>';
}
add_filter('the_password_form', 'custom_password_form');

if (post_password_required()) {
    echo get_the_password_form();
    return;
}

remove_all_actions('wp_head');
remove_all_actions('wp_footer');

global $wpdb;

// Получаем услуги для селектора
$services = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}booking_services WHERE active = 1");

// Обработка действий (убраны проверки прав)
if (isset($_POST['action'])) {
    check_admin_referer('booking_actions');
    
    if ($_POST['action'] == 'delete_booking') {
        $wpdb->delete("{$wpdb->prefix}booking_orders", ['id' => intval($_POST['id'])]);
    }
    elseif ($_POST['action'] == 'update_booking') {
        $data = [
            'service_id' => intval($_POST['service_id']),
            'booking_date' => sanitize_text_field($_POST['booking_date']),
            'start_time' => sanitize_text_field($_POST['start_time']),
            'end_time' => sanitize_text_field($_POST['end_time']),
            'client_name' => sanitize_text_field($_POST['client_name']),
            'client_phone' => preg_replace('/[^0-9]/', '', $_POST['client_phone']),
            'client_email' => sanitize_email($_POST['client_email'])
        ];
        $wpdb->update("{$wpdb->prefix}booking_orders", $data, ['id' => intval($_POST['id'])]);
    }
    wp_redirect(get_permalink());
    exit;
}

// Получаем текущий месяц
$current_month = isset($_GET['month']) 
    ? DateTime::createFromFormat('Y-m', sanitize_text_field($_GET['month']))
    : new DateTime();
$current_month->modify('first day of this month');

$start_date = $current_month->format('Y-m-01');
$end_date = $current_month->format('Y-m-t');

$bookings_count = $wpdb->get_results($wpdb->prepare("
    SELECT 
        DATE_FORMAT(booking_date, '%%Y-%%m-%%d') as day,
        COUNT(*) as count
    FROM {$wpdb->prefix}booking_orders
    WHERE booking_date BETWEEN %s AND %s
    GROUP BY day
", $start_date, $end_date), OBJECT_K);

$bookings = $wpdb->get_results("
    SELECT 
        o.*,
        s.name as service_name 
    FROM {$wpdb->prefix}booking_orders o
    LEFT JOIN {$wpdb->prefix}booking_services s 
    ON o.service_id = s.id
    ORDER BY o.booking_date ASC, o.start_time ASC
");

$grouped = [];
foreach ($bookings as $booking) {
    $date = $booking->booking_date;
    $grouped[$date][] = $booking;
}

?><!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo('charset'); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Админ-панель бронирований</title>
    <?php wp_head(); ?>
    <style>
    .booking-admin-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 20px;
    }

    .calendar-wrapper {
        margin: 2rem 0;
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .calendar-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .calendar-nav button {
        background: #3498db;
        color: white;
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 6px;
        cursor: pointer;
        transition: background 0.3s;
    }

    .calendar-nav button:hover {
        background: #2980b9;
    }

    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

    .calendar-table th,
    .calendar-table td {
        padding: 1rem;
        text-align: center;
        border: 1px solid #eee;
        height: 60px;
    }

    .calendar-table th {
        background: #f8f9fa;
        font-weight: 500;
    }

    .calendar-day {
        cursor: pointer;
        transition: background 0.2s;
        position: relative;
    }

    .calendar-day:hover {
        background: #f8f9fa;
    }

    .calendar-day.active {
        background: #3498db;
        color: white;
    }

    .event-count {
        font-size: 0.8em;
        color: #666;
        position: absolute;
        bottom: 2px;
        right: 2px;
    }

    .calendar-day.active .event-count {
        color: white;
    }

    .other-month {
        background: #fafafa;
        color: #999;
    }

    .today {
        background: #e3f2fd;
    }

    #noBookingsMessage {
        display: none;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        color: #666;
        text-align: center;
        margin: 2rem 0;
    }

    .bookings-list {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .booking-day-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        padding: 1.5rem;
    }

    .booking-date-header {
        font-size: 1.5rem;
        color: #2c3e50;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #3498db;
    }

    .booking-item {
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        transition: transform 0.2s;
        border: 1px solid #eee;
    }

    .booking-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.08);
    }

    .client-info div {
        margin: 0.8rem 0;
        font-size: 1rem;
    }

    .info-label {
        color: #3498db;
        font-weight: 500;
        min-width: 80px;
        display: inline-block;
    }

    @media (max-width: 768px) {
        .calendar-table td, .calendar-table th {
            padding: 0.5rem;
            font-size: 0.9rem;
        }
        
        .calendar-nav button {
            padding: 0.6rem 1rem;
        }
        
        .booking-admin-container {
            padding: 0 15px;
        }
    }
        /* Модальные окна */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
    }
    
    .modal-content {
        background: white;
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        border-radius: 8px;
    }
    
    .action-buttons {
        margin-top: 1rem;
        display: flex;
        gap: 1rem;
    }
    
    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .btn-edit {
        background: #3498db;
        color: white;
    }
    
    .btn-delete {
        background: #e74c3c;
        color: white;
    }
    
    .btn-new {
        background: #2ecc71;
        color: white;
        margin-bottom: 1rem;
    }
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        overflow-y: auto;
    }

    .modal-content {
        background: white;
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        border-radius: 8px;
    }

    .form-row {
        margin-bottom: 1rem;
    }

    .form-row label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
    }

    .form-row input,
    .form-row select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .action-buttons {
        margin-top: 1.5rem;
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 0.6rem 1.2rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: opacity 0.2s;
    }

    .btn:hover {
        opacity: 0.9;
    }

    .btn-edit {
        background: #3498db;
        color: white;
    }

    .btn-delete {
        background: #e74c3c;
        color: white;
    }

    .btn-new {
        background: #2ecc71;
        color: white;
        margin-bottom: 1rem;
    }

    .btn-cancel {
        background: #95a5a6;
        color: white;
    }

    .booking-item {
        position: relative;
        padding: 1.5rem;
        margin-bottom: 1rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .booking-actions {
        position: absolute;
        top: 1rem;
        right: 1rem;
        display: flex;
        gap: 0.5rem;
    }
    .time-slots-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 0.5rem;
    margin: 1rem 0;
    }
    
    .time-slot {
    padding: 10px;
    margin: 5px;
    border: 1px solid #ddd;
    cursor: pointer;
    transition: all 0.2s;
}
.time-slot.valid {
    background: #e8f5e9;
    border-color: #4CAF50;
}
    
    .time-slot.selected {
    background: #2196F3;
    color: white;
}
    .time-slot.disabled {
        background: #eee;
        cursor: not-allowed;
        opacity: 0.6;
    }
    .time-slot.invalid {
    background: #ffebee;
    border-color: #f44336;
    opacity: 0.7;
}

.loading, .error {
    padding: 20px;
    text-align: center;
    color: #666;
}

.error button {
    margin-top: 10px;
    padding: 5px 15px;
    background: #f44336;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

    .time-slot.original.selected {
        background: #ff9800;
        color: white;
    }
    .time-slot.original {
    border-width: 2px;
    font-weight: bold;
}
    
    .time-slot.original.valid {
    background: #e8f5e9 !important; /* Светло-зеленый */
    border-color: #2e7d32 !important;
}
    
    .time-slot.original.invalid {
    background: #ffebee !important; /* Светло-красный */
    border-color: #c62828 !important;
}
    
    .time-slot.original::after {
    content: 'Ваше время';
    position: absolute;
    bottom: 2px;
    right: 2px;
    font-size: 0.6em;
    color: #666;
}
    </style>
</head>
<body style="margin:0; background:#f0f0f1;">

<div class="booking-admin-container">
    <button class="btn btn-new" onclick="openCreateModal()">+ Новая запись</button>
    
    <div class="calendar-wrapper">
        <div class="calendar-nav">
            <button onclick="changeMonth(-1)">&larr; Предыдущий</button>
            <h3><?= $current_month->format('F Y') ?></h3>
            <button onclick="changeMonth(1)">Следующий &rarr;</button>
        </div>
        
        <table class="calendar-table">
            <tr>
                <th>Пн</th><th>Вт</th><th>Ср</th><th>Чт</th><th>Пт</th><th>Сб</th><th>Вс</th>
            </tr>
            <?php
            $day = 1;
            $first_day = (int)$current_month->format('N');
            $total_days = (int)$current_month->format('t');
            $currentDate = new DateTime();
            
            for ($i = 0; $i < 6; $i++) {
                echo '<tr>';
                for ($j = 1; $j <= 7; $j++) {
                    $cell_class = [];
                    $date_str = null;
                    
                    if (($i === 0 && $j < $first_day) || $day > $total_days) {
                        $diff = $day > $total_days ? $day - $total_days : -($first_day - $j);
                        $temp_date = clone $current_month;
                        $temp_date->modify($diff . ' days');
                        $date_str = $temp_date->format('Y-m-d');
                        $cell_class[] = 'other-month';
                    } else {
                        $date_str = $current_month->format('Y-m-') . str_pad($day, 2, '0', STR_PAD_LEFT);
                        if ($date_str === $currentDate->format('Y-m-d')) {
                            $cell_class[] = 'today';
                        }
                        $day++;
                    }

                    $count = $bookings_count[$date_str]->count ?? 0;
                    $display_day = $date_str ? explode('-', $date_str)[2] : '';
                    
                    echo '<td class="calendar-day ' . implode(' ', $cell_class) . '" 
                         data-date="' . $date_str . '"
                         onclick="selectDate(this)">';
                    
                    echo '<div>' . $display_day . '</div>';
                    if ($count > 0) {
                        echo '<span class="event-count">(' . $count . ')</span>';
                    }
                    
                    echo '</td>';
                }
                echo '</tr>';
                if ($day > $total_days) break;
            }
            ?>
        </table>
    </div>

    <!-- Модальное окно редактирования -->
<div id="editModal" class="modal">
    <div class="modal-content">
        <h3>Редактирование записи</h3>
        <form method="post" id="editForm">
            <?php wp_nonce_field('booking_actions'); ?>
            <input type="hidden" name="action" value="update_booking">
            <input type="hidden" name="id" id="editId">
            
            <div class="form-row">
                <label>Дата:</label>
                <input type="date" id="editBookingDate" required>
            </div>

            <div class="form-row">
                <label>Услуга:</label>
                <select id="editService" required>
                    <?php foreach($services as $service): ?>
                        <option value="<?= $service->id ?>" 
                            data-duration="<?= $service->duration ?>"
                            data-break="<?= $service->break ?>"
                            data-weekday-price="<?= $service->weekday_price ?>" 
                            data-weekend-price="<?= $service->weekend_price ?>">
                            <?= $service->name ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="form-row">
                <label>Доступное время:</label>
                <div id="editTimeSlots" class="time-slots-container"></div>
            </div>

            <div class="form-row">
                <label>Имя клиента:</label>
                <input type="text" name="client_name" id="editName" required>
            </div>

            <div class="form-row">
                <label>Телефон:</label>
                <input type="tel" name="client_phone" id="editPhone" required>
            </div>

            <div class="form-row">
                <label>Email:</label>
                <input type="email" name="client_email" id="editEmail" required>
            </div>

            <input type="hidden" name="booking_date" id="editSelectedDate">
            <input type="hidden" name="start_time" id="editStartTime">
            <input type="hidden" name="end_time" id="editEndTime">
            <input type="hidden" name="service_id" id="editSelectedService">

            <div class="action-buttons">
                <button type="submit" class="btn btn-edit">Сохранить</button>
                <button type="button" class="btn btn-cancel" onclick="closeModals()">Отмена</button>
            </div>
        </form>
    </div>
</div>

   <!-- Модальное окно создания -->
<div id="createModal" class="modal">
    <div class="modal-content">
        <h3>Новая запись</h3>
        <form method="post" id="createForm">
            <?php wp_nonce_field('booking_actions'); ?>
            <input type="hidden" name="action" value="create_booking">
            
            <div class="form-row">
                <label>Дата:</label>
                <input type="date" id="createBookingDate" required>
            </div>

            <div class="form-row">
                <label>Услуга:</label>
                <select id="createService" required>
                    <?php foreach($services as $service): ?>
                        <option value="<?= $service->id ?>" 
                            data-duration="<?= $service->duration ?>"
                            data-break="<?= $service->break ?>"
                            data-weekday-price="<?= $service->weekday_price ?>" 
                            data-weekend-price="<?= $service->weekend_price ?>">
                            <?= $service->name ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="form-row">
                <label>Доступное время:</label>
                <div id="createTimeSlots" class="time-slots-container"></div>
            </div>

            <div class="form-row">
                <label>Имя клиента:</label>
                <input type="text" name="client_name" id="createName" required>
            </div>

            <div class="form-row">
                <label>Телефон:</label>
                <input type="tel" name="client_phone" id="createPhone" required>
            </div>

            <div class="form-row">
                <label>Email:</label>
                <input type="email" name="client_email" id="createEmail" required>
            </div>

            <input type="hidden" name="booking_date" id="selectedBookingDate">
            <input type="hidden" name="start_time" id="selectedStartTime">
            <input type="hidden" name="end_time" id="selectedEndTime">
            <input type="hidden" name="service_id" id="selectedServiceId">

            <div class="action-buttons">
                <button type="submit" class="btn btn-new">Создать</button>
                <button type="button" class="btn btn-cancel" onclick="closeModals()">Отмена</button>
            </div>
        </form>
    </div>
</div>
</div>


    
    <div class="bookings-list">
        <div id="noBookingsMessage" style="display: none;">
            Нет записей на выбранную дату
        </div>
    <?php if (!empty($grouped)): ?>
        <?php foreach ($grouped as $date => $items): ?>
            <div class="booking-day-card" data-date="<?= esc_attr($date) ?>">
                <div class="booking-date-header"><?= date('d.m.Y', strtotime($date)) ?></div>
                <?php foreach ($items as $booking): ?>
                    <div class="booking-item" data-id="<?= $booking->id ?>">
                        <div class="booking-actions">
                            <button class="btn btn-edit" onclick="openEditModal(<?= $booking->id ?>)">✏️</button>
                            <button class="btn btn-delete" onclick="deleteBooking(<?= $booking->id ?>)">🗑️</button>
                        </div>
                        <div class="client-info">
                            <div><span class="info-label">Время:</span><?= $booking->start_time ?> - <?= $booking->end_time ?></div>
                            <div><span class="info-label">Имя:</span><?= esc_html($booking->client_name) ?></div>
                            <div><span class="info-label">Телефон:</span><?= esc_html($booking->client_phone) ?></div>
                            <div><span class="info-label">Email:</span><?= esc_html($booking->client_email) ?></div>
                            <div><span class="info-label">Услуга:</span><?= esc_html($booking->service_name) ?></div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php endforeach; ?>
    <?php else: ?>
        <div id="noBookingsMessage" style="display: block;">
            Нет активных записей
        </div>
    <?php endif; ?>
</div>
</div>

<script>

var adminPageID = <?php echo $admin_page_id; ?>;
var bookingNonce = '<?php echo wp_create_nonce('booking_actions'); ?>';

document.addEventListener('DOMContentLoaded', () => {
    let selectedDate = null;
    
    // Обработчик кликов по календарю
    document.querySelector('.calendar-table').addEventListener('click', (e) => {
        const cell = e.target.closest('.calendar-day');
        if(cell) selectDate(cell);
    });

    // Навигация по месяцам
        window.changeMonth = function(offset) {
        const url = new URL(window.location.href);
        const currentMonth = url.searchParams.get('month') || '<?= $current_month->format('Y-m') ?>';
        const newDate = new Date(currentMonth + '-01');
        newDate.setMonth(newDate.getMonth() + offset);
        url.searchParams.set('month', newDate.toISOString().slice(0,7));
        window.location.href = url.href;
    };
    
    window.selectDate = function(cell) {
        const date = cell.dataset.date;
        if(!date) return;
    
        document.querySelectorAll('.calendar-day').forEach(c => {
            c.classList.remove('active');
        });
        
        cell.classList.add('active');
        selectedDate = date;
        
        // Показываем/скрываем записи
    let hasBookings = false;
    document.querySelectorAll('.booking-day-card').forEach(card => {
        if(card.dataset.date === date) {
            card.style.display = 'block';
            hasBookings = true;
        } else {
            card.style.display = 'none';
        }
    });
    
    const noBookingsMsg = document.getElementById('noBookingsMessage');
    if(noBookingsMsg) {
        noBookingsMsg.style.display = hasBookings ? 'none' : 'block';
    }
        
        document.getElementById('noBookingsMessage').style.display = 
            document.querySelector('.booking-day-card[data-date="' + date + '"]') ? 'none' : 'block';
    };

    // Инициализация текущей даты
    const todayCell = document.querySelector('.calendar-day.today');
    if(todayCell) selectDate(todayCell);
});

async function openEditModal(id) {
    try {
        const response = await fetch(
            `/wp-json/bookings/v1/booking/${id}?page_id=${adminPageID}`
        );
        if(!response.ok) {
            if(response.status === 401) {
                alert('Требуется авторизация!');
                window.location.reload();
                return;
            }
            throw new Error(`Ошибка HTTP: ${response.status}`);
        }
        const booking = await response.json();
        
        // Дебаггинг
        console.log('Received booking data:', booking);
        
        // Заполнение полей
        document.getElementById('editId').value = booking.id;
        document.getElementById('editBookingDate').value = booking.booking_date;
        document.getElementById('editService').value = booking.service_id;
        document.getElementById('editName').value = booking.client_name;
        document.getElementById('editPhone').value = booking.client_phone;
        document.getElementById('editEmail').value = booking.client_email;
        document.getElementById('editStartTime').value = booking.start_time;
        document.getElementById('editEndTime').value = booking.end_time;
        
        // Загрузка временных слотов
        await loadTimeSlots(
            booking.booking_date, 
            booking.service_id, 
            document.getElementById('editTimeSlots'),
            booking.start_time,
            booking.end_time,
            booking.id // Добавляем ID бронирования
        );
        
        document.getElementById('editModal').style.display = 'block';
    } catch (error) {
        console.error('Error:', error);
        alert(error.message);
    }
}

async function loadTimeSlots(date, serviceId, container, originalStart, originalEnd, bookingId) {
    try {
        // 1. Сброс предыдущего состояния
        container.innerHTML = '<div class="loading">Загрузка...</div>';
        
        // 2. Запрос стандартных слотов
        const response = await fetch('/wp-admin/admin-ajax.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({
                action: 'get_time_slots',
                service_id: serviceId,
                date: date
            })
        });
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.data || 'Ошибка загрузки слотов');
        }

        // 3. Подготовка данных
        let slots = data.data.slots || [];
        
        // 4. Добавление оригинального слота
        if (originalStart && originalEnd) {
            const isValid = await validateTimeSlot(
                date, 
                serviceId, 
                originalStart, 
                originalEnd, 
                bookingId
            );

            slots.push({
                start: originalStart,
                end: originalEnd,
                isOriginal: true,
                isValid: isValid,
                isCurrent: true
            });
        }

        // 5. Сортировка слотов
        slots.sort((a, b) => {
            const toMinutes = time => {
                const [h, m] = time.split(':').map(Number);
                return h * 60 + m;
            };
            return toMinutes(a.start) - toMinutes(b.start);
        });

        // 6. Генерация HTML
        container.innerHTML = slots.map(slot => {
            const classes = [
                'time-slot',
                slot.isOriginal ? 'original' : '',
                slot.isOriginal ? (slot.isValid ? 'valid' : 'invalid') : '',
                slot.isCurrent ? 'current' : ''
            ].filter(c => c).join(' ');

            const title = slot.isOriginal 
                ? (slot.isValid 
                    ? 'Доступно для брони' 
                    : 'Конфликт времени')
                : `Свободный слот (${data.data.price} руб.)`;

            return `
                <div class="${classes}" 
                     data-start="${slot.start}"
                     data-end="${slot.end}"
                     title="${title}">
                    ${slot.start}
                    ${slot.isOriginal ? '⏳' : ''}
                </div>
            `;
        }).join('');

        // 7. Автовыбор валидного оригинального слота
        const originalSlot = container.querySelector('.time-slot.original.valid');
        if (originalSlot) {
            originalSlot.classList.add('selected');
            document.getElementById('editStartTime').value = originalSlot.dataset.start;
            document.getElementById('editEndTime').value = originalSlot.dataset.end;
        }

        // 8. Логирование для отладки
        console.log('Slots loaded:', {
            date,
            serviceId,
            originalStart,
            originalEnd,
            bookingId,
            slots
        });

    } catch (error) {
        console.error('Ошибка загрузки слотов:', error);
        container.innerHTML = `
            <div class="error">
                Ошибка загрузки: ${error.message}
                <button onclick="loadTimeSlots('${date}', ${serviceId}, this.parentElement, '${originalStart}', '${originalEnd}', ${bookingId})">
                    Повторить
                </button>
            </div>
        `;
    }
}

async function validateTimeSlot(date, serviceId, start, end, bookingId) {
    try {
        const response = await fetch('/wp-admin/admin-ajax.php', {
            method: 'POST',
            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
            body: new URLSearchParams({
                action: 'validate_booking',
                service_id: serviceId,
                date: date,
                start: start,
                end: end,
                exclude_id: bookingId || 0 // Добавляем fallback
            })
        });
        
        const data = await response.json();
        return data.data.valid;
    } catch(error) {
        console.error('Ошибка валидации:', error);
        return false;
    }
}


function deleteBooking(id) {
    if (confirm('Вы уверены?')) {
        fetch('/wp-admin/admin-ajax.php', {
            method: 'POST',
            body: new URLSearchParams({
                action: 'delete_booking',
                id: id,
                page_id: adminPageID,
                security: bookingNonce
            })
        }).then(() => {
            location.reload();
        });
    }
}

function closeModals() {
    document.querySelectorAll('.modal').forEach(m => m.style.display = 'none');
}

// Обновленный обработчик формы редактирования
document.getElementById('editForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    formData.append('security', '<?= wp_create_nonce("booking_actions") ?>');

    if (!document.querySelector('#editTimeSlots .time-slot.selected')) {
        alert('Выберите время!');
        return;
    }

    fetch('/wp-admin/admin-ajax.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Изменения сохранены!');
            location.reload();
        } else {
            alert('Ошибка: ' + (data.data || 'Неизвестная ошибка'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Ошибка сети');
    });
});

function openCreateModal() {
    // Сброс предыдущих значений
    document.getElementById('createBookingDate').value = '';
    document.getElementById('createService').value = '';
    document.getElementById('createName').value = '';
    document.getElementById('createPhone').value = '';
    document.getElementById('createEmail').value = '';
    document.getElementById('createTimeSlots').innerHTML = '';
    
    document.getElementById('createModal').style.display = 'block';
}

// Общая функция для загрузки слотов
function loadTimeSlots(date, serviceId, targetElement) {
    const service = document.querySelector(`#createService option[value="${serviceId}"]`);
    
    fetch('/wp-admin/admin-ajax.php', {
        method: 'POST',
        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
        body: new URLSearchParams({
            action: 'get_time_slots',
            service_id: serviceId,
            date: date
        })
    })
    .then(r => r.json())
    .then(data => {
        if(data.success) {
            targetElement.innerHTML = data.data.slots.map(slot => `
                <div class="time-slot" 
                     data-start="${slot.start}" 
                     data-end="${slot.end}"
                     data-price="${slot.price}">
                    ${slot.start}
                </div>
            `).join('');
        }
    });
}

// Обработчики событий для модального окна редактирования
document.getElementById('editBookingDate').addEventListener('change', function() {
    const serviceId = document.getElementById('editService').value;
    loadTimeSlots(
        this.value, 
        serviceId,
        document.getElementById('editTimeSlots'),
        document.getElementById('editStartTime').value,
        document.getElementById('editEndTime').value
    );
});

// Обновленный обработчик изменения услуги
document.getElementById('editService').addEventListener('change', async function() {
    const date = document.getElementById('editBookingDate').value;
    const originalStart = document.getElementById('editStartTime').value;
    const originalEnd = document.getElementById('editEndTime').value;
    const bookingId = document.getElementById('editId').value;
    
    if(date) {
        await loadTimeSlots(
            date, 
            this.value,
            document.getElementById('editTimeSlots'),
            originalStart,
            originalEnd,
            bookingId
        );
    }
});
document.getElementById('editTimeSlots').addEventListener('click', (e) => {
    const slot = e.target.closest('.time-slot');
    if(!slot) return;
    
    // Блокируем выбор невалидных оригинальных слотов
    if(slot.classList.contains('invalid')) {
        alert('Это время недоступно для выбора!');
        return;
    }
    
    // Снимаем выделение со всех слотов
    document.querySelectorAll('#editTimeSlots .time-slot').forEach(s => {
        s.classList.remove('selected');
    });
    
    // Выделяем выбранный слот
    slot.classList.add('selected');
    
    // Обновляем скрытые поля только если это не оригинальный слот
    if(!slot.classList.contains('original')) {
        document.getElementById('editStartTime').value = slot.dataset.start;
        document.getElementById('editEndTime').value = slot.dataset.end;
    }
    
    // Всегда обновляем service_id
    document.getElementById('editSelectedService').value = document.getElementById('editService').value;
});

// Обработчики событий для модального окна создания
document.getElementById('createBookingDate').addEventListener('change', function() {
    const serviceId = document.getElementById('createService').value;
    loadTimeSlots(this.value, serviceId, document.getElementById('createTimeSlots'));
});

document.getElementById('createService').addEventListener('change', function() {
    const date = document.getElementById('createBookingDate').value;
    if(date) {
        loadTimeSlots(date, this.value, document.getElementById('createTimeSlots'));
    }
});

document.getElementById('createTimeSlots').addEventListener('click', (e) => {
    if(e.target.classList.contains('time-slot')) {
        document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
        e.target.classList.add('selected');
        
        // Заполняем скрытые поля
        document.getElementById('selectedBookingDate').value = document.getElementById('createBookingDate').value;
        document.getElementById('selectedStartTime').value = e.target.dataset.start;
        document.getElementById('selectedEndTime').value = e.target.dataset.end;
        document.getElementById('selectedServiceId').value = document.getElementById('createService').value;
    }
});

// Обновленный обработчик отправки формы
document.getElementById('createForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    formData.append('security', '<?= wp_create_nonce("booking_actions") ?>');

    if (!document.querySelector('#createTimeSlots .time-slot.selected')) {
        alert('Выберите время!');
        return;
    }

    fetch('/wp-admin/admin-ajax.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Запись успешно создана! ID: ' + data.data.id);
            location.reload();
        } else {
            alert('Ошибка: ' + (data.data || 'Неизвестная ошибка'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Ошибка сети');
    });
});
</script>


</body>
</html>

//Второй код function php

<?php
/**
 * Twenty Twenty-Four functions and definitions
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 *
 * @package Twenty Twenty-Four
 * @since Twenty Twenty-Four 1.0
 */

/**
 * Register block styles.
 */

if ( ! function_exists( 'twentytwentyfour_block_styles' ) ) :
	/**
	 * Register custom block styles
	 *
	 * @since Twenty Twenty-Four 1.0
	 * @return void
	 */
	function twentytwentyfour_block_styles() {

		register_block_style(
			'core/details',
			array(
				'name'         => 'arrow-icon-details',
				'label'        => __( 'Arrow icon', 'twentytwentyfour' ),
				/*
				 * Styles for the custom Arrow icon style of the Details block
				 */
				'inline_style' => '
				.is-style-arrow-icon-details {
					padding-top: var(--wp--preset--spacing--10);
					padding-bottom: var(--wp--preset--spacing--10);
				}

				.is-style-arrow-icon-details summary {
					list-style-type: "\2193\00a0\00a0\00a0";
				}

				.is-style-arrow-icon-details[open]>summary {
					list-style-type: "\2192\00a0\00a0\00a0";
				}',
			)
		);
		register_block_style(
			'core/post-terms',
			array(
				'name'         => 'pill',
				'label'        => __( 'Pill', 'twentytwentyfour' ),
				/*
				 * Styles variation for post terms
				 * https://github.com/WordPress/gutenberg/issues/24956
				 */
				'inline_style' => '
				.is-style-pill a,
				.is-style-pill span:not([class], [data-rich-text-placeholder]) {
					display: inline-block;
					background-color: var(--wp--preset--color--base-2);
					padding: 0.375rem 0.875rem;
					border-radius: var(--wp--preset--spacing--20);
				}

				.is-style-pill a:hover {
					background-color: var(--wp--preset--color--contrast-3);
				}',
			)
		);
		register_block_style(
			'core/list',
			array(
				'name'         => 'checkmark-list',
				'label'        => __( 'Checkmark', 'twentytwentyfour' ),
				/*
				 * Styles for the custom checkmark list block style
				 * https://github.com/WordPress/gutenberg/issues/51480
				 */
				'inline_style' => '
				ul.is-style-checkmark-list {
					list-style-type: "\2713";
				}

				ul.is-style-checkmark-list li {
					padding-inline-start: 1ch;
				}',
			)
		);
		register_block_style(
			'core/navigation-link',
			array(
				'name'         => 'arrow-link',
				'label'        => __( 'With arrow', 'twentytwentyfour' ),
				/*
				 * Styles for the custom arrow nav link block style
				 */
				'inline_style' => '
				.is-style-arrow-link .wp-block-navigation-item__label:after {
					content: "\2197";
					padding-inline-start: 0.25rem;
					vertical-align: middle;
					text-decoration: none;
					display: inline-block;
				}',
			)
		);
		register_block_style(
			'core/heading',
			array(
				'name'         => 'asterisk',
				'label'        => __( 'With asterisk', 'twentytwentyfour' ),
				'inline_style' => "
				.is-style-asterisk:before {
					content: '';
					width: 1.5rem;
					height: 3rem;
					background: var(--wp--preset--color--contrast-2, currentColor);
					clip-path: path('M11.93.684v8.039l5.633-5.633 1.216 1.23-5.66 5.66h8.04v1.737H13.2l5.701 5.701-1.23 1.23-5.742-5.742V21h-1.737v-8.094l-5.77 5.77-1.23-1.217 5.743-5.742H.842V9.98h8.162l-5.701-5.7 1.23-1.231 5.66 5.66V.684h1.737Z');
					display: block;
				}

				/* Hide the asterisk if the heading has no content, to avoid using empty headings to display the asterisk only, which is an A11Y issue */
				.is-style-asterisk:empty:before {
					content: none;
				}

				.is-style-asterisk:-moz-only-whitespace:before {
					content: none;
				}

				.is-style-asterisk.has-text-align-center:before {
					margin: 0 auto;
				}

				.is-style-asterisk.has-text-align-right:before {
					margin-left: auto;
				}

				.rtl .is-style-asterisk.has-text-align-left:before {
					margin-right: auto;
				}",
			)
		);
	}
endif;

add_action( 'init', 'twentytwentyfour_block_styles' );

/**
 * Enqueue block stylesheets.
 */

if ( ! function_exists( 'twentytwentyfour_block_stylesheets' ) ) :
	/**
	 * Enqueue custom block stylesheets
	 *
	 * @since Twenty Twenty-Four 1.0
	 * @return void
	 */
	function twentytwentyfour_block_stylesheets() {
		/**
		 * The wp_enqueue_block_style() function allows us to enqueue a stylesheet
		 * for a specific block. These will only get loaded when the block is rendered
		 * (both in the editor and on the front end), improving performance
		 * and reducing the amount of data requested by visitors.
		 *
		 * See https://make.wordpress.org/core/2021/12/15/using-multiple-stylesheets-per-block/ for more info.
		 */
		wp_enqueue_block_style(
			'core/button',
			array(
				'handle' => 'twentytwentyfour-button-style-outline',
				'src'    => get_parent_theme_file_uri( 'assets/css/button-outline.css' ),
				'ver'    => wp_get_theme( get_template() )->get( 'Version' ),
				'path'   => get_parent_theme_file_path( 'assets/css/button-outline.css' ),
			)
		);
	}
endif;

add_action( 'init', 'twentytwentyfour_block_stylesheets' );

/**
 * Register pattern categories.
 */

if ( ! function_exists( 'twentytwentyfour_pattern_categories' ) ) :
	/**
	 * Register pattern categories
	 *
	 * @since Twenty Twenty-Four 1.0
	 * @return void
	 */
	function twentytwentyfour_pattern_categories() {

		register_block_pattern_category(
			'page',
			array(
				'label'       => _x( 'Pages', 'Block pattern category' ),
				'description' => __( 'A collection of full page layouts.' ),
			)
		);
	}
endif;

add_action( 'init', 'twentytwentyfour_pattern_categories' );




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////













/////////////////////////////////////////////////////////////////////////////////////////////













/* Основные обработчики бронирований */
if (!defined('ABSPATH')) exit; // Защита от прямого доступа

// Константы для уведомлений
define('TELEGRAM_BOT_TOKEN', '7623757721:AAElzsJ9ajJq_d1ATbI5VFBoiAF0aKyJpcE');
define('ADMIN_CHAT_ID', '930819186');

/* Основные обработчики бронирований */
add_action('wp_ajax_get_time_slots', 'get_time_slots');
add_action('wp_ajax_nopriv_get_time_slots', 'get_time_slots');
add_action('wp_ajax_submit_booking', 'submit_booking');
add_action('wp_ajax_nopriv_submit_booking', 'submit_booking');
add_action('wp_ajax_nopriv_update_booking', 'update_booking');
add_action('wp_ajax_nopriv_create_booking', 'create_booking');

// Добавляем новые AJAX обработчики
add_action('wp_ajax_delete_booking', 'delete_booking');
add_action('wp_ajax_nopriv_delete_booking', 'delete_booking');
add_action('wp_ajax_update_booking', 'update_booking');
add_action('wp_ajax_create_booking', 'create_booking');

add_action('wp_ajax_validate_booking', 'validate_booking');
add_action('wp_ajax_nopriv_validate_booking', 'validate_booking');

function validate_booking() {
    global $wpdb;
    
    $data = [
        'service_id' => intval($_POST['service_id']),
        'date' => sanitize_text_field($_POST['date']),
        'start' => sanitize_text_field($_POST['start']),
        'end' => sanitize_text_field($_POST['end']),
        'exclude_id' => isset($_POST['exclude_id']) ? intval($_POST['exclude_id']) : 0
    ];

    // Новый улучшенный запрос с учетом перерывов
    $conflict = $wpdb->get_var($wpdb->prepare(
        "SELECT o.id 
        FROM {$wpdb->prefix}booking_orders o
        LEFT JOIN {$wpdb->prefix}booking_services s ON o.service_id = s.id
        WHERE o.booking_date = %s 
        AND o.id != %d
        AND (
                (o.start_time < ADDTIME(%s, SEC_TO_TIME(s.break * 60)) 
                AND 
                o.end_time > SUBTIME(%s, SEC_TO_TIME(s.break * 60))
            )",
        $data['date'],
        $data['exclude_id'],
        $data['end'],
        $data['start']
    ));

    wp_send_json_success(['valid' => !$conflict]);
}

function verify_booking_access() {
    // Получаем ID страницы админки из запроса
    $page_id = isset($_POST['page_id']) ? intval($_POST['page_id']) : 0;
    
    // Проверяем пароль страницы
    if (post_password_required($page_id) && !has_post_password_been_entered($page_id)) {
        wp_send_json_error('Доступ запрещен. Введите пароль страницы.', 403);
    }
}

// В файле functions.php ДОБАВЬТЕ:
add_action('rest_api_init', function() {
    register_rest_route('bookings/v1', '/booking/(?P<id>\d+)', [
        'methods' => 'GET',
        'callback' => 'get_booking_details',
        'permission_callback' => '__return_true' // Разрешаем доступ всем
    ]);
});

add_filter('rest_authentication_errors', function($result) {
    $route = isset($_REQUEST['rest_route']) ? $_REQUEST['rest_route'] : '';
    
    // Разрешаем доступ к API бронирований если есть пароль
    if (strpos($route, '/bookings/v1/') === 0) {
        $page_id = isset($_GET['page_id']) ? intval($_GET['page_id']) : 0;
        if (!post_password_required($page_id) || has_post_password_been_entered($page_id)) {
            return true;
        }
        return new WP_Error('rest_forbidden', 'Требуется пароль страницы', ['status' => 403]);
    }
    
    return $result;
});

function get_booking_details($request) {
    global $wpdb;
    
     // Проверка доступа через параметр page_id
    $page_id = $request->get_param('page_id');
    if (post_password_required($page_id) && !has_post_password_been_entered($page_id)) {
        return new WP_Error('rest_forbidden', 'Требуется пароль', ['status' => 403]);
    }
    
    try {
        $id = $request['id'];
        if(!is_numeric($id)) {
            throw new Exception('Неверный ID записи');
        }
        
        $booking = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}booking_orders WHERE id = %d",
            $id
        ));
        
        if(!$booking) {
            throw new Exception('Запись не найдена', 404);
        }
        
        return $booking;
        
    } catch (Exception $e) {
        error_log('Booking API Error: ' . $e->getMessage());
        return new WP_Error('error', $e->getMessage(), ['status' => $e->getCode() ?: 500]);
    }
    
    // Добавляем название услуги
    $service = $wpdb->get_row($wpdb->prepare(
        "SELECT name FROM {$wpdb->prefix}booking_services WHERE id = %d",
        $booking->service_id
    ));
    
    $booking->service_name = $service ? $service->name : 'Неизвестная услуга';
    
    return $booking;
}

function create_booking() {
    global $wpdb;
    
    // Проверка nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'booking_actions')) {
        wp_send_json_error('Неверный запрос', 403);
    }
    
    // Проверка доступа через пароль страницы
    verify_booking_access();

    // Валидация данных
    $required = [
        'service_id', 
        'booking_date', 
        'start_time', 
        'end_time', 
        'client_name', 
        'client_phone', 
        'client_email'
    ];
    
    foreach ($required as $field) {
        if(empty($_POST[$field])) {
            wp_send_json_error("Не заполнено поле: $field", 400);
        }
    }

    // Проверка доступности времени
       $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT o.id 
         FROM {$wpdb->prefix}booking_orders o
         LEFT JOIN {$wpdb->prefix}booking_services s 
             ON o.service_id = s.id
         WHERE o.booking_date = %s 
         AND (
             (ADDTIME(o.end_time, SEC_TO_TIME(s.break * 60)) > %s 
             AND %s > ADDTIME(o.start_time, SEC_TO_TIME(-s.break * 60))
         )",
        $_POST['booking_date'],
        $_POST['start_time'],
        $_POST['end_time']
    ));

    if($exists) {
        wp_send_json_error('Это время уже занято', 400);
    }

    // Создание записи
    $data = [
        'service_id' => intval($_POST['service_id']),
        'booking_date' => sanitize_text_field($_POST['booking_date']),
        'start_time' => sanitize_text_field($_POST['start_time']),
        'end_time' => sanitize_text_field($_POST['end_time']),
        'client_name' => sanitize_text_field($_POST['client_name']),
        'client_phone' => preg_replace('/[^0-9]/', '', $_POST['client_phone']),
        'client_email' => sanitize_email($_POST['client_email']),
        'created_at' => current_time('mysql'),
        'price' => floatval($_POST['price'])
    ];

    $result = $wpdb->insert("{$wpdb->prefix}booking_orders", $data);

    if($result === false) {
        wp_send_json_error('Ошибка базы данных: ' . $wpdb->last_error, 500);
    }

    wp_send_json_success(['id' => $wpdb->insert_id]);
}

function delete_booking() {
    global $wpdb;
    // Проверка nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'booking_actions')) {
        wp_send_json_error('Неверный запрос', 403);
    }
    // Проверка доступа через пароль страницы
    verify_booking_access();


    $id = intval($_POST['id']);
    $result = $wpdb->delete(
        "{$wpdb->prefix}booking_orders", 
        ['id' => $id], 
        ['%d']
    );

    if($result === false) {
        wp_send_json_error('Ошибка удаления');
    }
    
    wp_send_json_success();
}

function update_booking() {
    global $wpdb;
    
    // Проверка nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'booking_actions')) {
        wp_send_json_error('Неверный запрос', 403);
    }
    
    // Проверка доступа через пароль страницы
    verify_booking_access();

    // Валидация данных
    $required = [
        'service_id', 
        'booking_date', 
        'start_time', 
        'end_time', 
        'client_name', 
        'client_phone', 
        'client_email'
    ];
    
    foreach ($required as $field) {
        if(empty($_POST[$field])) {
            wp_send_json_error("Не заполнено поле: $field", 400);
        }
    }

    // Новая проверка с учетом изменения услуги
    $exists = $wpdb->get_var($wpdb->prepare(
        "SELECT o.id 
         FROM {$wpdb->prefix}booking_orders o
         WHERE o.booking_date = %s 
         AND o.id != %d
         AND (
             (o.start_time < %s AND o.end_time > %s) OR
             (%s BETWEEN o.start_time AND o.end_time) OR
             (%s BETWEEN o.start_time AND o.end_time)
         )",
        $_POST['booking_date'],
        intval($_POST['id']),
        $_POST['end_time'],
        $_POST['start_time'],
        $_POST['start_time'],
        $_POST['end_time']
    ));

    if($exists) {
        wp_send_json_error('Это время уже занято', 400);
    }

    // Обновление записи
    $data = [
        'service_id' => intval($_POST['service_id']),
        'booking_date' => sanitize_text_field($_POST['booking_date']),
        'start_time' => sanitize_text_field($_POST['start_time']),
        'end_time' => sanitize_text_field($_POST['end_time']),
        'client_name' => sanitize_text_field($_POST['client_name']),
        'client_phone' => preg_replace('/[^0-9]/', '', $_POST['client_phone']),
        'client_email' => sanitize_email($_POST['client_email'])
    ];

    $result = $wpdb->update(
        "{$wpdb->prefix}booking_orders",
        $data,
        ['id' => intval($_POST['id'])],
        ['%d', '%s', '%s', '%s', '%s', '%s', '%s'],
        ['%d']
    );

    if($result === false) {
        wp_send_json_error('Ошибка базы данных: ' . $wpdb->last_error, 500);
    }

    wp_send_json_success(['message' => 'Запись успешно обновлена']);
}

// =============================================
// БАЗОВЫЕ ФУНКЦИИ БРОНИРОВАНИЯ
// =============================================

function get_time_slots() {
    global $wpdb;
    
    $service_id = intval($_POST['service_id']);
    $date = sanitize_text_field($_POST['date']);
    
    // Проверка даты
    $selected_date = strtotime($date);
    $today = strtotime(date('Y-m-d 00:00:00'));
    
    if ($selected_date < $today) {
        wp_send_json_error('Нельзя выбрать прошедшую дату');
    }
    
    // Получаем данные услуги
    $service = $wpdb->get_row($wpdb->prepare(
        "SELECT duration, break, weekday_price, weekend_price 
         FROM {$wpdb->prefix}booking_services 
         WHERE id = %d", 
        $service_id
    ));
    
    if(!$service) {
        wp_send_json_error('Услуга не найдена');
    }
    
    $day_of_week = date('w', strtotime($date));
    $is_weekend = ($day_of_week == 0 || $day_of_week == 6);
    $price = $is_weekend ? $service->weekend_price : $service->weekday_price;
    
    // Получаем существующие брони с их перерывами
    $bookings = $wpdb->get_results($wpdb->prepare(
        "SELECT o.start_time, o.end_time, s.break 
         FROM {$wpdb->prefix}booking_orders o
         LEFT JOIN {$wpdb->prefix}booking_services s ON o.service_id = s.id
         WHERE o.booking_date = %s", 
        $date
    ));
    
    $slots = [];
    $start_time = strtotime("10:00");
    $end_time = strtotime("22:00");
    $service_duration = $service->duration * 60;
    $service_break = $service->break * 60;
    
    while($start_time <= $end_time - $service_duration) {
        $slot_end = $start_time + $service_duration;
        $total_occupied = $slot_end + $service_break;
        $available = true;
        
        // Проверяем пересечение с учетом перерывов
        foreach($bookings as $booking) {
            $busy_start = strtotime($booking->start_time);
            $busy_end = strtotime($booking->end_time) + ($booking->break * 60);
            
            $overlap = ($start_time < $busy_end) && ($total_occupied > $busy_start);
            
            if($overlap) {
                $available = false;
                break;
            }
        }
        
        if($available && $slot_end <= $end_time) {
            $slots[] = [
                'start' => date('H:i', $start_time),
                'end' => date('H:i', $slot_end),
                'price' => $price
            ];
        }
        
        $start_time += 1800; // Шаг 30 минут
    }
    
    wp_send_json_success([
        'slots' => $slots,
        'price' => $price,
        'is_weekend' => $is_weekend
    ]);
}

function submit_booking() {
    error_log('Received service_id: ' . print_r($_POST['service_id'], true));
    
    global $wpdb;
    
    // Измененный список обязательных полей
    $required = [
        'service_id', 
        'booking_date', // Изменено с date
        'start', 
        'end', 
        'name', 
        'phone', 
        'email'
    ];
    foreach($required as $field) {
        if(empty($_POST[$field])) {
            wp_send_json_error("Не заполнено поле: " . $field);
        }
    }

    // Получаем данные услуги
    $service = $wpdb->get_row($wpdb->prepare(
        "SELECT name, duration, break, weekday_price, weekend_price 
         FROM {$wpdb->prefix}booking_services 
         WHERE id = %d", 
        intval($_POST['service_id'])
    ));
    
    if(!$service) {
        wp_send_json_error('Услуга не найдена');
    }

    $data = [
        'service_id' => intval($_POST['service_id']),
        'booking_date' => sanitize_text_field($_POST['booking_date']),
        'start_time' => sanitize_text_field($_POST['start']),
        'end_time' => sanitize_text_field($_POST['end']),
        'client_name' => sanitize_text_field($_POST['name']),
        'client_phone' => preg_replace('/[^0-9]/', '', $_POST['phone']),
        'client_email' => sanitize_email($_POST['email']),
        'created_at' => current_time('mysql')
    ];

    // Проверка на существующие бронирования
    $exists = $wpdb->get_var($wpdb->prepare(
            "SELECT o.id 
             FROM {$wpdb->prefix}booking_orders o
             LEFT JOIN {$wpdb->prefix}booking_services s 
                 ON o.service_id = s.id
             WHERE o.booking_date = %s 
             AND (
                 (ADDTIME(o.end_time, SEC_TO_TIME(s.break * 60)) > %s 
                 AND %s > ADDTIME(o.start_time, SEC_TO_TIME(-s.break * 60))
             )",
            $_POST['booking_date'],
            $_POST['start_time'],
            $_POST['end_time']
        ));
    
    if($exists) {
        wp_send_json_error('Это время уже занято');
    }

    $result = $wpdb->insert("{$wpdb->prefix}booking_orders", $data);
    if($result === false) {
        error_log('Ошибка БД: ' . $wpdb->last_error);
        wp_send_json_error('Ошибка сохранения записи');
    }

    // Отправка уведомления в Telegram (единственный вызов)
    $telegram_message = "✅ Новая запись!\n\n"
        . "📌 Услуга: {$service->name}\n"
        . "⏱ Длительность: {$service->duration} мин.\n"
        . "⏳ Перерыв: {$service->break} мин.\n"
        . "👤 Имя: {$_POST['name']}\n"
        . "📞 Телефон: " . preg_replace('/[^0-9]/', '', $_POST['phone']) . "\n"
        . "📧 Email: {$_POST['email']}\n"
        . "📅 Дата: {$_POST['booking_date']}\n"
        . "⏰ Время: {$_POST['start']}-{$_POST['end']}\n"
        . "💵 Стоимость: {$_POST['price']} руб.";

    send_telegram_message(ADMIN_CHAT_ID, $telegram_message);
    
    wp_send_json_success(['booking_id' => $wpdb->insert_id]);

}

// =============================================
// ФОРМА БРОНИРОВАНИЯ (frontend)
// =============================================


add_shortcode('booking_form', function() {
    global $wpdb;
    $services = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}booking_services");
    ob_start(); ?>
    
    <style>
    .booking-form {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .form-group {
        margin-bottom: 1.5rem;
    }
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
    }
    input, select {
        width: 100%;
        padding: 0.8rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }
    #time-slots {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 0.5rem;
        margin: 1.5rem 0;
    }
    .time-slot {
        padding: 0.8rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
    }
    .time-slot.selected {
        background: #2196F3;
        color: white;
        border-color: #2196F3;
    }
    #submit-booking {
        width: 100%;
        padding: 1rem;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1.1rem;
        cursor: pointer;
        margin-top: 1rem;
    }
    .service-info {
    margin: 15px 0;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
}
.service-info div {
    margin: 5px 0;
}
#price-value {
    color: #2196F3;
    font-weight: 600;
}
    </style>

    <div class="booking-form">
        <div class="form-group">
            <label for="booking-date">Дата:</label>
            <input type="date" id="booking-date" min="<?= date('Y-m-d') ?>" required>
        </div>
        
        <div class="form-group">
            <label for="booking-service">Услуга:</label>
            <select id="booking-service" required>
                <?php foreach($services as $service): ?>
                <option value="<?= $service->id ?>" 
                    data-duration="<?= $service->duration ?>"
                    data-break="<?= $service->break ?>"
                    data-weekday-price="<?= $service->weekday_price ?>" 
                    data-weekend-price="<?= $service->weekend_price ?>">
                    <?= $service->name ?> 
                    (Длительность: <?= $service->duration ?> мин,
                     Перерыв: <?= $service->break ?> мин)
                </option>
                <?php endforeach; ?>
            </select>
        </div>
        
        <div class="service-info">
            <div>Стоимость: <span id="price-value">0</span> руб.</div>
        </div>

        <div class="form-group">
            <label>Доступное время:</label>
            <div id="time-slots"></div>
        </div>

        <div class="form-group">
            <input type="text" id="client-name" placeholder="Ваше имя" required>
        </div>
        
        <div class="form-group">
            <input type="tel" id="client-phone" placeholder="Телефон" required>
        </div>
        
        <div class="form-group">
            <input type="email" id="client-email" required placeholder="Email">
        </div>

        <button id="submit-booking">Забронировать</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const dateInput = document.getElementById('booking-date');
        const serviceSelect = document.getElementById('booking-service');
        const timeSlots = document.getElementById('time-slots');
        
        function updatePriceDisplay() {
            if(!dateInput.value) return;
            
            const date = new Date(dateInput.value);
            const isWeekend = [0, 6].includes(date.getDay()); // 0 - воскресенье, 6 - суббота
            
            const serviceOption = serviceSelect.options[serviceSelect.selectedIndex];
            const price = isWeekend 
                ? serviceOption.dataset.weekendPrice 
                : serviceOption.dataset.weekdayPrice;
            
            document.getElementById('price-value').textContent = price;
        }

        function loadSlots() {
             const service = {
                duration: parseInt(document.querySelector('#booking-service').dataset.duration),
                break: parseInt(document.querySelector('#booking-service').dataset.break)
            };
            if(!dateInput.value) return;
            
            fetch('/wp-admin/admin-ajax.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: new URLSearchParams({
                    action: 'get_time_slots',
                    service_id: serviceSelect.value,
                    date: dateInput.value
                })
            })
            .then(r => r.json())
            .then(data => {
                if(data.success) {
                    timeSlots.innerHTML = data.data.slots.map(slot => `
                        <div class="time-slot" 
                             data-start="${slot.start}" 
                             data-end="${slot.end}"
                             data-price="${slot.price}">
                            ${slot.start}
                        </div>
                    `).join('');
                }
            });
        }

        dateInput.addEventListener('change', () => {
            updatePriceDisplay();
            loadSlots();
        });
        
        serviceSelect.addEventListener('change', () => {
            if(dateInput.value) {
                updatePriceDisplay();
                loadSlots();
            }
        });

        timeSlots.addEventListener('click', (e) => {
            if(e.target.classList.contains('time-slot')) {
                document.querySelectorAll('.time-slot').forEach(s => s.classList.remove('selected'));
                e.target.classList.add('selected');
            }
        });

        document.getElementById('submit-booking').addEventListener('click', () => {
            const selected = document.querySelector('.time-slot.selected');
            if(!selected) return alert('Выберите время!');
            
        const price = document.getElementById('price-value').textContent;

    
        const formData = {
            action: 'submit_booking',
            service_id: serviceSelect.value,
            booking_date: dateInput.value, // Изменено с date на booking_date
            start: selected.dataset.start,
            end: selected.dataset.end,
            name: document.getElementById('client-name').value.trim(),
            phone: document.getElementById('client-phone').value.replace(/\D/g, ''),
            email: document.getElementById('client-email').value.trim(),
            price: price
        };

    fetch('/wp-admin/admin-ajax.php', {
        method: 'POST',
        body: new URLSearchParams(formData)
    })
    .then(r => r.json())
    .then(data => {
        if(data.success) {
            alert('Бронирование успешно! ID: ' + data.data.booking_id);
            location.reload();
        } else {
            alert('Ошибка: ' + data.data);
        }
            });
        });

        // Маска для телефона
        document.getElementById('client-phone').addEventListener('input', function(e) {
            let x = e.target.value.replace(/\D/g, '').match(/(\d{0,1})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/);
            e.target.value = !x[2] ? x[1] : '+7 (' + x[2] + ') ' + x[3] + (x[4] ? '-' + x[4] : '') + (x[5] ? '-' + x[5] : '');
        });
            updatePriceDisplay();

    });
    </script>
    
    <?php
    return ob_get_clean();
});


///////////////////////////////////////////////////////////////



// Исправленная функция отправки сообщения Телеграм
function send_telegram_message($chat_id, $text) {
    $url = "https://api.telegram.org/bot".TELEGRAM_BOT_TOKEN."/sendMessage";
    wp_remote_post($url, [
        'body' => [
            'chat_id' => $chat_id,
            'text' => $text
        ]
    ]);
}


